/*
 * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package templates

import org.xml.sax.InputSource
import java.io.File
import java.io.FileWriter
import java.io.Reader
import javax.xml.xpath.XPathFactory

fun autogeneratedWarning(generator: String): String = """//
// NOTE: THIS FILE IS AUTO-GENERATED by the $generator
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//"""

lateinit var COPYRIGHT_NOTICE: String

fun readCopyrightNoticeFromProfile(copyrightProfile: File): String = readCopyrightNoticeFromProfile { copyrightProfile.reader() }

fun readCopyrightNoticeFromProfile(getCopyrightReader: () -> Reader): String {
    val template = getCopyrightReader().use { reader ->
        XPathFactory.newInstance().newXPath().evaluate("/component/copyright/option[@name='notice']/@value", InputSource(reader))
    }
    val yearTemplate = "&#36;today.year"
    val year = java.time.LocalDate.now().year.toString()
    assert(yearTemplate in template)

    return template.replace(yearTemplate, year).lines().joinToString("", prefix = "/*\n", postfix = " */\n") { " * $it\n" }
}


data class TargetedSourceFile<SF>(
    val target: KotlinTarget,
    val sourceFile: SF
)

@JvmName("groupByFileAndWriteGroups")
fun Sequence<MemberTemplateGroupBase>.groupByFileAndWrite(
        targetsToGenerate: Collection<KotlinTarget>,
        fileNameBuilder: (TargetedSourceFile<SourceFile>) -> File
) {
    flatMap { group ->
        group.invoke()
                .flatMap { it.instantiate(targetsToGenerate) }
                .sortedBy { it.sortingSignature }
    }.groupByFileAndWrite(fileNameBuilder) { file, targetedSourceFile -> writeTo(file, targetedSourceFile) }
}

@JvmName("groupByFileAndWriteTestGroups")
fun Sequence<TestTemplateGroupBase>.groupByFileAndWriteTest(
    targetsToGenerate: Collection<KotlinTarget>,
    fileNameBuilder: (TargetedSourceFile<TestSourceFile>) -> File
) {
    flatMap { group ->
        group.invoke()
            .flatMap { it.instantiate(targetsToGenerate) }
            .sortedBy { it.sortingName }
    }.groupByFileAndWrite(fileNameBuilder) { file, targetedSourceFile -> writeTestsTo(file, targetedSourceFile) }
}

@JvmName("groupByFileAndWriteTemplates")
fun Sequence<MemberTemplate<MemberBuilder>>.groupByFileAndWrite(
        targetsToGenerate: Collection<KotlinTarget>,
        fileNameBuilder: (TargetedSourceFile<SourceFile>) -> File
) {
    flatMap { it.instantiate(targetsToGenerate) }
        .groupByFileAndWrite(fileNameBuilder) { file, targetedSourceFile -> writeTo(file, targetedSourceFile) }
}

@JvmName("groupByFileAndWriteMembers")
fun Sequence<MemberBuilder>.groupByFileAndWrite(
        fileNameBuilder: (TargetedSourceFile<SourceFile>) -> File,
        writeTo: List<MemberBuilder>.(File, TargetedSourceFile<SourceFile>) -> Unit
) {
    val groupedMembers = groupBy { TargetedSourceFile(it.target, it.sourceFile) }

    for ((psf, members) in groupedMembers) {
        val file = fileNameBuilder(psf)
        members.writeTo(file, psf)
    }
}

@JvmName("groupByFileAndWriteTests")
fun Sequence<TestBuilder>.groupByFileAndWrite(
        fileNameBuilder: (TargetedSourceFile<TestSourceFile>) -> File,
        writeTo: List<TestBuilder>.(File, TargetedSourceFile<TestSourceFile>) -> Unit
) {
    val groupedMembers = groupBy { TargetedSourceFile(it.target, it.sourceFile) }

    for ((psf, members) in groupedMembers) {
        val file = fileNameBuilder(psf)
        members.writeTo(file, psf)
    }
}

fun List<MemberBuilder>.writeTo(file: File, targetedSource: TargetedSourceFile<SourceFile>) {
    val (target, sourceFile) = targetedSource
    println("Generating file: $file")
    file.parentFile.mkdirs()
    FileWriter(file).use { writer ->
        writer.appendln(COPYRIGHT_NOTICE)

        when (target.platform) {
            Platform.Common, Platform.JVM -> {
                if (sourceFile.multifile) {
                    writer.appendln("@file:kotlin.jvm.JvmMultifileClass")
                }

                writer.appendln("@file:kotlin.jvm.JvmName(\"${sourceFile.jvmClassName}\")")
                sourceFile.jvmPackageName?.let {
                    writer.appendln("@file:kotlin.jvm.JvmPackageName(\"$it\")")
                }
                writer.appendln()
            }
        }

        writer.append("package ${sourceFile.packageName ?: "kotlin"}\n\n")
        writer.append("${autogeneratedWarning("GenerateStandardLib.kt")}\n\n")
        if (target.platform == Platform.JS) {
            writer.appendln("import kotlin.js.*")
            if (sourceFile == SourceFile.Arrays) {
                writer.appendln("import primitiveArrayConcat")
                writer.appendln("import withType")
            }
        }
        if (target.platform == Platform.Common) {
            writer.appendln("import kotlin.random.*")
        }
        if (sourceFile.packageName == "kotlin.collections") {
            writer.appendln("import kotlin.ranges.contains")
            writer.appendln("import kotlin.ranges.reversed")
        }

        writer.appendln()

        for (f in this) {
            f.build(writer)
        }
    }
}

fun List<TestBuilder>.writeTestsTo(file: File, targetedSource: TargetedSourceFile<TestSourceFile>) {
    val (target, sourceFile) = targetedSource
    println("Generating file: $file")
    file.parentFile.mkdirs()
    FileWriter(file).use { writer ->
        writer.appendln(COPYRIGHT_NOTICE)

        writer.append("package ${sourceFile.packageName ?: "test"}\n\n")
        writer.append("${autogeneratedWarning("GenerateStandardLibTests.kt")}\n\n")

        if (sourceFile == TestSourceFile.Arrays) {
            writer.append("import test.comparisons.STRING_CASE_INSENSITIVE_ORDER\n")
        } else if (sourceFile in setOf(TestSourceFile.Primitives, TestSourceFile.Unsigned, TestSourceFile.Comparisons, TestSourceFile.UComparisons)) {
            writer.append("import kotlin.random.*\n")
        }

        writer.append("import kotlin.test.*\n\n")

        writer.append("class ${file.nameWithoutExtension} {\n")

        for (f in this) {
            f.build(writer)
        }

        writer.append("}\n")
    }
}
