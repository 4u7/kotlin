/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package test.comparisons

//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLibTests.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

import kotlin.random.*
import kotlin.test.*

class _ComparisonsTest {
    @Test
    fun maxOf_2_Int() {
        expect(2) { maxOf(2, 1) }
        expect(126) { maxOf(58, 126) }
        expect(23) { maxOf(Random.nextInt(Int.MIN_VALUE, 23), 23) }
        expect(Int.MAX_VALUE) { maxOf(Int.MIN_VALUE, Int.MAX_VALUE) }
        expect(Int.MIN_VALUE) { maxOf(Int.MIN_VALUE, Int.MIN_VALUE) }
    }

    @Test
    fun maxOf_2_Long() {
        expect(2L) { maxOf(2L, 1L) }
        expect(126L) { maxOf(58L, 126L) }
        expect(23L) { maxOf(Random.nextLong(Long.MIN_VALUE, 23L), 23L) }
        expect(Long.MAX_VALUE) { maxOf(Long.MIN_VALUE, Long.MAX_VALUE) }
        expect(Long.MIN_VALUE) { maxOf(Long.MIN_VALUE, Long.MIN_VALUE) }
    }

    @Test
    fun maxOf_2_Byte() {
        expect(2.toByte()) { maxOf(2.toByte(), 1.toByte()) }
        expect(126.toByte()) { maxOf(58.toByte(), 126.toByte()) }
        expect(23.toByte()) { maxOf(Random.nextInt(Byte.MIN_VALUE.toInt(), 23).toByte(), 23.toByte()) }
        expect(Byte.MAX_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MAX_VALUE) }
        expect(Byte.MIN_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MIN_VALUE) }
    }

    @Test
    fun maxOf_2_Short() {
        expect(2.toShort()) { maxOf(2.toShort(), 1.toShort()) }
        expect(126.toShort()) { maxOf(58.toShort(), 126.toShort()) }
        expect(23.toShort()) { maxOf(Random.nextInt(Short.MIN_VALUE.toInt(), 23).toShort(), 23.toShort()) }
        expect(Short.MAX_VALUE) { maxOf(Short.MIN_VALUE, Short.MAX_VALUE) }
        expect(Short.MIN_VALUE) { maxOf(Short.MIN_VALUE, Short.MIN_VALUE) }
    }

    @Test
    fun maxOf_2_Double() {
        expect(2.0) { maxOf(2.0, 1.0) }
        expect(126.0) { maxOf(58.0, 126.0) }
        expect(23.0) { maxOf(Random.nextDouble(Double.MIN_VALUE, 23.0), 23.0) }
        expect(Double.MAX_VALUE) { maxOf(Double.MIN_VALUE, Double.MAX_VALUE) }
        expect(Double.MIN_VALUE) { maxOf(Double.MIN_VALUE, Double.MIN_VALUE) }
            assertEquals(0.0, maxOf(0.0, -0.0))
            assertEquals(0.0, maxOf(-0.0, 0.0))
            assertEquals(Double.POSITIVE_INFINITY, maxOf(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY))
            
    }

    @Test
    fun maxOf_2_Float() {
        expect(2.0f) { maxOf(2.0f, 1.0f) }
        expect(126.0f) { maxOf(58.0f, 126.0f) }
        expect(23.0f) { maxOf(Random.nextDouble(Float.MIN_VALUE.toDouble(), 23.0).toFloat(), 23.0f) }
        expect(Float.MAX_VALUE) { maxOf(Float.MIN_VALUE, Float.MAX_VALUE) }
        expect(Float.MIN_VALUE) { maxOf(Float.MIN_VALUE, Float.MIN_VALUE) }
            assertEquals(0.0f, maxOf(0.0f, -0.0f))
            assertEquals(0.0f, maxOf(-0.0f, 0.0f))
            assertEquals(Float.POSITIVE_INFINITY, maxOf(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY))
            
    }

    @Test
    fun maxOf_3_Int() {
        expect(3) { maxOf(2, 1, 3) }
        expect(126) { maxOf(58, 126, 55) }
        expect(23) { maxOf(Random.nextInt(Int.MIN_VALUE, 23), 23, Random.nextInt(Int.MIN_VALUE, 23)) }
        expect(Int.MIN_VALUE) { maxOf(Int.MIN_VALUE, Int.MIN_VALUE, Int.MIN_VALUE) }
            expect(Int.MAX_VALUE) { maxOf(Int.MIN_VALUE, Int.MAX_VALUE, 0) }
            
    }

    @Test
    fun maxOf_3_Long() {
        expect(3L) { maxOf(2L, 1L, 3L) }
        expect(126L) { maxOf(58L, 126L, 55L) }
        expect(23L) { maxOf(Random.nextLong(Long.MIN_VALUE, 23L), 23L, Random.nextLong(Long.MIN_VALUE, 23L)) }
        expect(Long.MIN_VALUE) { maxOf(Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE) }
            expect(Long.MAX_VALUE) { maxOf(Long.MIN_VALUE, Long.MAX_VALUE, 0L) }
            
    }

    @Test
    fun maxOf_3_Byte() {
        expect(3.toByte()) { maxOf(2.toByte(), 1.toByte(), 3.toByte()) }
        expect(126.toByte()) { maxOf(58.toByte(), 126.toByte(), 55.toByte()) }
        expect(23.toByte()) { maxOf(Random.nextInt(Byte.MIN_VALUE.toInt(), 23).toByte(), 23.toByte(), Random.nextInt(Byte.MIN_VALUE.toInt(), 23).toByte()) }
        expect(Byte.MIN_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MIN_VALUE, Byte.MIN_VALUE) }
            expect(Byte.MAX_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MAX_VALUE, 0.toByte()) }
            
    }

    @Test
    fun maxOf_3_Short() {
        expect(3.toShort()) { maxOf(2.toShort(), 1.toShort(), 3.toShort()) }
        expect(126.toShort()) { maxOf(58.toShort(), 126.toShort(), 55.toShort()) }
        expect(23.toShort()) { maxOf(Random.nextInt(Short.MIN_VALUE.toInt(), 23).toShort(), 23.toShort(), Random.nextInt(Short.MIN_VALUE.toInt(), 23).toShort()) }
        expect(Short.MIN_VALUE) { maxOf(Short.MIN_VALUE, Short.MIN_VALUE, Short.MIN_VALUE) }
            expect(Short.MAX_VALUE) { maxOf(Short.MIN_VALUE, Short.MAX_VALUE, 0.toShort()) }
            
    }

    @Test
    fun maxOf_3_Double() {
        expect(3.0) { maxOf(2.0, 1.0, 3.0) }
        expect(126.0) { maxOf(58.0, 126.0, 55.0) }
        expect(23.0) { maxOf(Random.nextDouble(Double.MIN_VALUE, 23.0), 23.0, Random.nextDouble(Double.MIN_VALUE, 23.0)) }
        expect(Double.MIN_VALUE) { maxOf(Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE) }
            expect(Double.MAX_VALUE) { maxOf(Double.MIN_VALUE, Double.MAX_VALUE, 0.0) }
            assertEquals(0.0, maxOf(0.0, -0.0, -0.0))
            assertEquals(0.0, maxOf(-0.0, 0.0, 0.0))
            assertEquals(Double.POSITIVE_INFINITY, maxOf(Double.POSITIVE_INFINITY, Double.MAX_VALUE, Double.MIN_VALUE))
            
    }

    @Test
    fun maxOf_3_Float() {
        expect(3.0f) { maxOf(2.0f, 1.0f, 3.0f) }
        expect(126.0f) { maxOf(58.0f, 126.0f, 55.0f) }
        expect(23.0f) { maxOf(Random.nextDouble(Float.MIN_VALUE.toDouble(), 23.0).toFloat(), 23.0f, Random.nextDouble(Float.MIN_VALUE.toDouble(), 23.0).toFloat()) }
        expect(Float.MIN_VALUE) { maxOf(Float.MIN_VALUE, Float.MIN_VALUE, Float.MIN_VALUE) }
            expect(Float.MAX_VALUE) { maxOf(Float.MIN_VALUE, Float.MAX_VALUE, 0.0f) }
            assertEquals(0.0f, maxOf(0.0f, -0.0f, -0.0f))
            assertEquals(0.0f, maxOf(-0.0f, 0.0f, 0.0f))
            assertEquals(Float.POSITIVE_INFINITY, maxOf(Float.POSITIVE_INFINITY, Float.MAX_VALUE, Float.MIN_VALUE))
            
    }

    @Test
    fun maxOf_vararg_Int() {
        expect(10) { maxOf(2, 1, 3, 10) }
        expect(126) { maxOf(58, 126, 55, 87) }
        expect(23) { maxOf(Random.nextInt(Int.MIN_VALUE, 23), 23, Random.nextInt(Int.MIN_VALUE, 23), 21) }
        expect(Int.MIN_VALUE) { maxOf(Int.MIN_VALUE, Int.MIN_VALUE, Int.MIN_VALUE, Int.MIN_VALUE) }
            expect(Int.MAX_VALUE) { maxOf(Int.MIN_VALUE, Int.MAX_VALUE, 0, 1) }
            
    }

    @Test
    fun maxOf_vararg_Long() {
        expect(10L) { maxOf(2L, 1L, 3L, 10L) }
        expect(126L) { maxOf(58L, 126L, 55L, 87L) }
        expect(23L) { maxOf(Random.nextLong(Long.MIN_VALUE, 23L), 23L, Random.nextLong(Long.MIN_VALUE, 23L), 21L) }
        expect(Long.MIN_VALUE) { maxOf(Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE) }
            expect(Long.MAX_VALUE) { maxOf(Long.MIN_VALUE, Long.MAX_VALUE, 0L, 1L) }
            
    }

    @Test
    fun maxOf_vararg_Byte() {
        expect(10.toByte()) { maxOf(2.toByte(), 1.toByte(), 3.toByte(), 10.toByte()) }
        expect(126.toByte()) { maxOf(58.toByte(), 126.toByte(), 55.toByte(), 87.toByte()) }
        expect(23.toByte()) { maxOf(Random.nextInt(Byte.MIN_VALUE.toInt(), 23).toByte(), 23.toByte(), Random.nextInt(Byte.MIN_VALUE.toInt(), 23).toByte(), 21.toByte()) }
        expect(Byte.MIN_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MIN_VALUE, Byte.MIN_VALUE, Byte.MIN_VALUE) }
            expect(Byte.MAX_VALUE) { maxOf(Byte.MIN_VALUE, Byte.MAX_VALUE, 0.toByte(), 1.toByte()) }
            
    }

    @Test
    fun maxOf_vararg_Short() {
        expect(10.toShort()) { maxOf(2.toShort(), 1.toShort(), 3.toShort(), 10.toShort()) }
        expect(126.toShort()) { maxOf(58.toShort(), 126.toShort(), 55.toShort(), 87.toShort()) }
        expect(23.toShort()) { maxOf(Random.nextInt(Short.MIN_VALUE.toInt(), 23).toShort(), 23.toShort(), Random.nextInt(Short.MIN_VALUE.toInt(), 23).toShort(), 21.toShort()) }
        expect(Short.MIN_VALUE) { maxOf(Short.MIN_VALUE, Short.MIN_VALUE, Short.MIN_VALUE, Short.MIN_VALUE) }
            expect(Short.MAX_VALUE) { maxOf(Short.MIN_VALUE, Short.MAX_VALUE, 0.toShort(), 1.toShort()) }
            
    }

    @Test
    fun maxOf_vararg_Double() {
        expect(10.0) { maxOf(2.0, 1.0, 3.0, 10.0) }
        expect(126.0) { maxOf(58.0, 126.0, 55.0, 87.0) }
        expect(23.0) { maxOf(Random.nextDouble(Double.MIN_VALUE, 23.0), 23.0, Random.nextDouble(Double.MIN_VALUE, 23.0), 21.0) }
        expect(Double.MIN_VALUE) { maxOf(Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE) }
            expect(Double.MAX_VALUE) { maxOf(Double.MIN_VALUE, Double.MAX_VALUE, 0.0, 1.0) }
            assertEquals(0.0, maxOf(0.0, -0.0, -0.0, 0.0))
            assertEquals(0.0, maxOf(-0.0, 0.0, 0.0, -0.0))
            assertEquals(Double.POSITIVE_INFINITY, maxOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double.MIN_VALUE))
            
    }

    @Test
    fun maxOf_vararg_Float() {
        expect(10.0f) { maxOf(2.0f, 1.0f, 3.0f, 10.0f) }
        expect(126.0f) { maxOf(58.0f, 126.0f, 55.0f, 87.0f) }
        expect(23.0f) { maxOf(Random.nextDouble(Float.MIN_VALUE.toDouble(), 23.0).toFloat(), 23.0f, Random.nextDouble(Float.MIN_VALUE.toDouble(), 23.0).toFloat(), 21.0f) }
        expect(Float.MIN_VALUE) { maxOf(Float.MIN_VALUE, Float.MIN_VALUE, Float.MIN_VALUE, Float.MIN_VALUE) }
            expect(Float.MAX_VALUE) { maxOf(Float.MIN_VALUE, Float.MAX_VALUE, 0.0f, 1.0f) }
            assertEquals(0.0f, maxOf(0.0f, -0.0f, -0.0f, 0.0f))
            assertEquals(0.0f, maxOf(-0.0f, 0.0f, 0.0f, -0.0f))
            assertEquals(Float.POSITIVE_INFINITY, maxOf(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.MAX_VALUE, Float.MIN_VALUE))
            
    }

    @Test
    fun minOf_2_Int() {
        expect(1) { minOf(2, 1) }
        expect(58) { minOf(58, 126) }
        expect(23) { minOf(Random.nextInt(23..Int.MAX_VALUE), 23) }
        expect(Int.MIN_VALUE) { minOf(Int.MIN_VALUE, Int.MAX_VALUE) }
        expect(Int.MAX_VALUE) { minOf(Int.MAX_VALUE, Int.MAX_VALUE) }
    }

    @Test
    fun minOf_2_Long() {
        expect(1L) { minOf(2L, 1L) }
        expect(58L) { minOf(58L, 126L) }
        expect(23L) { minOf(Random.nextLong(23L..Long.MAX_VALUE), 23L) }
        expect(Long.MIN_VALUE) { minOf(Long.MIN_VALUE, Long.MAX_VALUE) }
        expect(Long.MAX_VALUE) { minOf(Long.MAX_VALUE, Long.MAX_VALUE) }
    }

    @Test
    fun minOf_2_Byte() {
        expect(1.toByte()) { minOf(2.toByte(), 1.toByte()) }
        expect(58.toByte()) { minOf(58.toByte(), 126.toByte()) }
        expect(23.toByte()) { minOf(Random.nextInt(23..Byte.MAX_VALUE.toInt()).toByte(), 23.toByte()) }
        expect(Byte.MIN_VALUE) { minOf(Byte.MIN_VALUE, Byte.MAX_VALUE) }
        expect(Byte.MAX_VALUE) { minOf(Byte.MAX_VALUE, Byte.MAX_VALUE) }
    }

    @Test
    fun minOf_2_Short() {
        expect(1.toShort()) { minOf(2.toShort(), 1.toShort()) }
        expect(58.toShort()) { minOf(58.toShort(), 126.toShort()) }
        expect(23.toShort()) { minOf(Random.nextInt(23..Short.MAX_VALUE.toInt()).toShort(), 23.toShort()) }
        expect(Short.MIN_VALUE) { minOf(Short.MIN_VALUE, Short.MAX_VALUE) }
        expect(Short.MAX_VALUE) { minOf(Short.MAX_VALUE, Short.MAX_VALUE) }
    }

    @Test
    fun minOf_2_Double() {
        expect(1.0) { minOf(2.0, 1.0) }
        expect(58.0) { minOf(58.0, 126.0) }
        expect(23.0) { minOf(Random.nextDouble(23.0, Double.MAX_VALUE), 23.0) }
        expect(Double.MIN_VALUE) { minOf(Double.MIN_VALUE, Double.MAX_VALUE) }
        expect(Double.MAX_VALUE) { minOf(Double.MAX_VALUE, Double.MAX_VALUE) }
            assertEquals(-0.0, minOf(0.0, -0.0))
            assertEquals(-0.0, minOf(-0.0, 0.0))
            assertEquals(Double.NEGATIVE_INFINITY, minOf(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY))
            
    }

    @Test
    fun minOf_2_Float() {
        expect(1.0f) { minOf(2.0f, 1.0f) }
        expect(58.0f) { minOf(58.0f, 126.0f) }
        expect(23.0f) { minOf(Random.nextDouble(23.0, Float.MAX_VALUE.toDouble()).toFloat(), 23.0f) }
        expect(Float.MIN_VALUE) { minOf(Float.MIN_VALUE, Float.MAX_VALUE) }
        expect(Float.MAX_VALUE) { minOf(Float.MAX_VALUE, Float.MAX_VALUE) }
            assertEquals(-0.0f, minOf(0.0f, -0.0f))
            assertEquals(-0.0f, minOf(-0.0f, 0.0f))
            assertEquals(Float.NEGATIVE_INFINITY, minOf(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY))
            
    }

    @Test
    fun minOf_3_Int() {
        expect(1) { minOf(2, 1, 3) }
        expect(55) { minOf(58, 126, 55) }
        expect(23) { minOf(Random.nextInt(23..Int.MAX_VALUE), 23, Random.nextInt(23..Int.MAX_VALUE)) }
        expect(Int.MAX_VALUE) { minOf(Int.MAX_VALUE, Int.MAX_VALUE, Int.MAX_VALUE) }
            expect(Int.MIN_VALUE) { minOf(Int.MIN_VALUE, Int.MAX_VALUE, 0) }
            
    }

    @Test
    fun minOf_3_Long() {
        expect(1L) { minOf(2L, 1L, 3L) }
        expect(55L) { minOf(58L, 126L, 55L) }
        expect(23L) { minOf(Random.nextLong(23L..Long.MAX_VALUE), 23L, Random.nextLong(23L..Long.MAX_VALUE)) }
        expect(Long.MAX_VALUE) { minOf(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE) }
            expect(Long.MIN_VALUE) { minOf(Long.MIN_VALUE, Long.MAX_VALUE, 0L) }
            
    }

    @Test
    fun minOf_3_Byte() {
        expect(1.toByte()) { minOf(2.toByte(), 1.toByte(), 3.toByte()) }
        expect(55.toByte()) { minOf(58.toByte(), 126.toByte(), 55.toByte()) }
        expect(23.toByte()) { minOf(Random.nextInt(23..Byte.MAX_VALUE.toInt()).toByte(), 23.toByte(), Random.nextInt(23..Byte.MAX_VALUE.toInt()).toByte()) }
        expect(Byte.MAX_VALUE) { minOf(Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE) }
            expect(Byte.MIN_VALUE) { minOf(Byte.MIN_VALUE, Byte.MAX_VALUE, 0.toByte()) }
            
    }

    @Test
    fun minOf_3_Short() {
        expect(1.toShort()) { minOf(2.toShort(), 1.toShort(), 3.toShort()) }
        expect(55.toShort()) { minOf(58.toShort(), 126.toShort(), 55.toShort()) }
        expect(23.toShort()) { minOf(Random.nextInt(23..Short.MAX_VALUE.toInt()).toShort(), 23.toShort(), Random.nextInt(23..Short.MAX_VALUE.toInt()).toShort()) }
        expect(Short.MAX_VALUE) { minOf(Short.MAX_VALUE, Short.MAX_VALUE, Short.MAX_VALUE) }
            expect(Short.MIN_VALUE) { minOf(Short.MIN_VALUE, Short.MAX_VALUE, 0.toShort()) }
            
    }

    @Test
    fun minOf_3_Double() {
        expect(1.0) { minOf(2.0, 1.0, 3.0) }
        expect(55.0) { minOf(58.0, 126.0, 55.0) }
        expect(23.0) { minOf(Random.nextDouble(23.0, Double.MAX_VALUE), 23.0, Random.nextDouble(23.0, Double.MAX_VALUE)) }
        expect(Double.MAX_VALUE) { minOf(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE) }
            expect(0.0) { minOf(Double.MIN_VALUE, Double.MAX_VALUE, 0.0) }
            assertEquals(-0.0, minOf(0.0, -0.0, -0.0))
            assertEquals(-0.0, minOf(-0.0, 0.0, 0.0))
            assertEquals(Double.MIN_VALUE, minOf(Double.POSITIVE_INFINITY, Double.MAX_VALUE, Double.MIN_VALUE))
            
    }

    @Test
    fun minOf_3_Float() {
        expect(1.0f) { minOf(2.0f, 1.0f, 3.0f) }
        expect(55.0f) { minOf(58.0f, 126.0f, 55.0f) }
        expect(23.0f) { minOf(Random.nextDouble(23.0, Float.MAX_VALUE.toDouble()).toFloat(), 23.0f, Random.nextDouble(23.0, Float.MAX_VALUE.toDouble()).toFloat()) }
        expect(Float.MAX_VALUE) { minOf(Float.MAX_VALUE, Float.MAX_VALUE, Float.MAX_VALUE) }
            expect(0.0f) { minOf(Float.MIN_VALUE, Float.MAX_VALUE, 0.0f) }
            assertEquals(-0.0f, minOf(0.0f, -0.0f, -0.0f))
            assertEquals(-0.0f, minOf(-0.0f, 0.0f, 0.0f))
            assertEquals(Float.MIN_VALUE, minOf(Float.POSITIVE_INFINITY, Float.MAX_VALUE, Float.MIN_VALUE))
            
    }

    @Test
    fun minOf_vararg_Int() {
        expect(1) { minOf(2, 1, 3, 10) }
        expect(55) { minOf(58, 126, 55, 87) }
        expect(21) { minOf(Random.nextInt(23..Int.MAX_VALUE), 23, Random.nextInt(23..Int.MAX_VALUE), 21) }
        expect(Int.MAX_VALUE) { minOf(Int.MAX_VALUE, Int.MAX_VALUE, Int.MAX_VALUE, Int.MAX_VALUE) }
            expect(Int.MIN_VALUE) { minOf(Int.MIN_VALUE, Int.MAX_VALUE, 0, 1) }
            
    }

    @Test
    fun minOf_vararg_Long() {
        expect(1L) { minOf(2L, 1L, 3L, 10L) }
        expect(55L) { minOf(58L, 126L, 55L, 87L) }
        expect(21L) { minOf(Random.nextLong(23L..Long.MAX_VALUE), 23L, Random.nextLong(23L..Long.MAX_VALUE), 21L) }
        expect(Long.MAX_VALUE) { minOf(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE) }
            expect(Long.MIN_VALUE) { minOf(Long.MIN_VALUE, Long.MAX_VALUE, 0L, 1L) }
            
    }

    @Test
    fun minOf_vararg_Byte() {
        expect(1.toByte()) { minOf(2.toByte(), 1.toByte(), 3.toByte(), 10.toByte()) }
        expect(55.toByte()) { minOf(58.toByte(), 126.toByte(), 55.toByte(), 87.toByte()) }
        expect(21.toByte()) { minOf(Random.nextInt(23..Byte.MAX_VALUE.toInt()).toByte(), 23.toByte(), Random.nextInt(23..Byte.MAX_VALUE.toInt()).toByte(), 21.toByte()) }
        expect(Byte.MAX_VALUE) { minOf(Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE) }
            expect(Byte.MIN_VALUE) { minOf(Byte.MIN_VALUE, Byte.MAX_VALUE, 0.toByte(), 1.toByte()) }
            
    }

    @Test
    fun minOf_vararg_Short() {
        expect(1.toShort()) { minOf(2.toShort(), 1.toShort(), 3.toShort(), 10.toShort()) }
        expect(55.toShort()) { minOf(58.toShort(), 126.toShort(), 55.toShort(), 87.toShort()) }
        expect(21.toShort()) { minOf(Random.nextInt(23..Short.MAX_VALUE.toInt()).toShort(), 23.toShort(), Random.nextInt(23..Short.MAX_VALUE.toInt()).toShort(), 21.toShort()) }
        expect(Short.MAX_VALUE) { minOf(Short.MAX_VALUE, Short.MAX_VALUE, Short.MAX_VALUE, Short.MAX_VALUE) }
            expect(Short.MIN_VALUE) { minOf(Short.MIN_VALUE, Short.MAX_VALUE, 0.toShort(), 1.toShort()) }
            
    }

    @Test
    fun minOf_vararg_Double() {
        expect(1.0) { minOf(2.0, 1.0, 3.0, 10.0) }
        expect(55.0) { minOf(58.0, 126.0, 55.0, 87.0) }
        expect(21.0) { minOf(Random.nextDouble(23.0, Double.MAX_VALUE), 23.0, Random.nextDouble(23.0, Double.MAX_VALUE), 21.0) }
        expect(Double.MAX_VALUE) { minOf(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE) }
            expect(0.0) { minOf(Double.MIN_VALUE, Double.MAX_VALUE, 0.0, 1.0) }
            assertEquals(-0.0, minOf(0.0, -0.0, -0.0, 0.0))
            assertEquals(-0.0, minOf(-0.0, 0.0, 0.0, -0.0))
            assertEquals(Double.NEGATIVE_INFINITY, minOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.MAX_VALUE, Double.MIN_VALUE))
            
    }

    @Test
    fun minOf_vararg_Float() {
        expect(1.0f) { minOf(2.0f, 1.0f, 3.0f, 10.0f) }
        expect(55.0f) { minOf(58.0f, 126.0f, 55.0f, 87.0f) }
        expect(21.0f) { minOf(Random.nextDouble(23.0, Float.MAX_VALUE.toDouble()).toFloat(), 23.0f, Random.nextDouble(23.0, Float.MAX_VALUE.toDouble()).toFloat(), 21.0f) }
        expect(Float.MAX_VALUE) { minOf(Float.MAX_VALUE, Float.MAX_VALUE, Float.MAX_VALUE, Float.MAX_VALUE) }
            expect(0.0f) { minOf(Float.MIN_VALUE, Float.MAX_VALUE, 0.0f, 1.0f) }
            assertEquals(-0.0f, minOf(0.0f, -0.0f, -0.0f, 0.0f))
            assertEquals(-0.0f, minOf(-0.0f, 0.0f, 0.0f, -0.0f))
            assertEquals(Float.NEGATIVE_INFINITY, minOf(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.MAX_VALUE, Float.MIN_VALUE))
            
    }

}
